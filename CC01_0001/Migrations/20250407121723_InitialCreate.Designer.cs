// <auto-generated />
using System;
using CC01_0001.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CC01_0001.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250407121723_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CC01_0001.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CC01_0001.Models.BinanceExchangeRateLimits", b =>
                {
                    b.Property<int>("BinanceExchangeId")
                        .HasColumnType("int");

                    b.Property<int>("RateLimitId")
                        .HasColumnType("int");

                    b.HasKey("BinanceExchangeId", "RateLimitId");

                    b.HasIndex("RateLimitId");

                    b.ToTable("BinanceExchangeRateLimits");
                });

            modelBuilder.Entity("CC01_0001.Models.BinanceTrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("EventTime")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "E");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "e");

                    b.Property<bool>("Ignore")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "M");

                    b.Property<bool>("IsBuyerMarketMaker")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "m");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "p");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "q");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "s");

                    b.Property<long>("TradeId")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "t");

                    b.Property<long>("TradeTime")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "T");

                    b.HasKey("Id");

                    b.ToTable("BinanceTrades");
                });

            modelBuilder.Entity("CC01_0001.Models.CryptoCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrencySymbolId")
                        .HasColumnType("int");

                    b.Property<int>("ExchangeInfoId")
                        .HasColumnType("int");

                    b.Property<int>("MarketSettingsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateIntervalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencySymbolId");

                    b.HasIndex("ExchangeInfoId");

                    b.HasIndex("UpdateIntervalId");

                    b.ToTable("CryptoCurrencies");
                });

            modelBuilder.Entity("CC01_0001.Models.CurrencySymbol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CryptoCurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CurrencySymbols");
                });

            modelBuilder.Entity("CC01_0001.Models.ExchangeFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BinanceExchangeInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BinanceExchangeInfoId");

                    b.ToTable("ExchangeFilters");
                });

            modelBuilder.Entity("CC01_0001.Models.ExchangeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("ServerTime")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateIntervalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UpdateIntervalId");

                    b.ToTable("ExchangeInfos");
                });

            modelBuilder.Entity("CC01_0001.Models.Filter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilterType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxQty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinQty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StepSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SymbolId")
                        .HasColumnType("int");

                    b.Property<string>("TickSize")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SymbolId");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("CC01_0001.Models.MarketSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AllowTrailingStop")
                        .HasColumnType("bit");

                    b.Property<string>("BaseAsset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BaseAssetPrecision")
                        .HasColumnType("int");

                    b.Property<int?>("BaseCommissionPrecision")
                        .HasColumnType("int");

                    b.Property<bool?>("CancelReplaceAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("CryptoCurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("ExchangeInfoId")
                        .HasColumnType("int");

                    b.Property<bool?>("IcebergAllowed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMarginTradingAllowed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSpotTradingAllowed")
                        .HasColumnType("bit");

                    b.Property<bool?>("OcoAllowed")
                        .HasColumnType("bit");

                    b.Property<bool?>("OtoAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("QuoteAsset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuoteAssetPrecision")
                        .HasColumnType("int");

                    b.Property<int?>("QuoteCommissionPrecision")
                        .HasColumnType("int");

                    b.Property<bool?>("QuoteOrderQtyMarketAllowed")
                        .HasColumnType("bit");

                    b.Property<int?>("QuotePrecision")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateIntervalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CryptoCurrencyId")
                        .IsUnique();

                    b.HasIndex("ExchangeInfoId");

                    b.HasIndex("UpdateIntervalId");

                    b.ToTable("MarketSettingsSet");
                });

            modelBuilder.Entity("CC01_0001.Models.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");
                });

            modelBuilder.Entity("CC01_0001.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CC01_0001.Models.PermissionSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MarketSettingsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarketSettingsId");

                    b.ToTable("PermissionSets");
                });

            modelBuilder.Entity("CC01_0001.Models.PermissionSetPermissions", b =>
                {
                    b.Property<int>("PermissionSetId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("PermissionSetId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionSetPermissions");
                });

            modelBuilder.Entity("CC01_0001.Models.RateLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntervalNum")
                        .HasColumnType("int");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<string>("RateLimitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RateLimits");
                });

            modelBuilder.Entity("CC01_0001.Models.SymbolOrderType", b =>
                {
                    b.Property<int>("MarketSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.HasKey("MarketSettingsId", "OrderTypeId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("SymbolOrderTypes");
                });

            modelBuilder.Entity("CC01_0001.Models.UpdateInterval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UpdateIntervals");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CC01_0001.Models.BinanceExchangeRateLimits", b =>
                {
                    b.HasOne("CC01_0001.Models.ExchangeInfo", "BinanceExchange")
                        .WithMany("BinanceExchangeRateLimits")
                        .HasForeignKey("BinanceExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CC01_0001.Models.RateLimit", "RateLimit")
                        .WithMany("BinanceExchangeRateLimits")
                        .HasForeignKey("RateLimitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BinanceExchange");

                    b.Navigation("RateLimit");
                });

            modelBuilder.Entity("CC01_0001.Models.CryptoCurrency", b =>
                {
                    b.HasOne("CC01_0001.Models.CurrencySymbol", "CurrencySymbol")
                        .WithMany("CryptoCurrency")
                        .HasForeignKey("CurrencySymbolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CC01_0001.Models.ExchangeInfo", "ExchangeInfo")
                        .WithMany("CryptoCurrencies")
                        .HasForeignKey("ExchangeInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CC01_0001.Models.UpdateInterval", "UpdateInterval")
                        .WithMany("CryptoCurrencies")
                        .HasForeignKey("UpdateIntervalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrencySymbol");

                    b.Navigation("ExchangeInfo");

                    b.Navigation("UpdateInterval");
                });

            modelBuilder.Entity("CC01_0001.Models.ExchangeFilter", b =>
                {
                    b.HasOne("CC01_0001.Models.ExchangeInfo", "BinanceExchangeInfo")
                        .WithMany("ExchangeFilters")
                        .HasForeignKey("BinanceExchangeInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BinanceExchangeInfo");
                });

            modelBuilder.Entity("CC01_0001.Models.ExchangeInfo", b =>
                {
                    b.HasOne("CC01_0001.Models.UpdateInterval", "UpdateInterval")
                        .WithMany("ExchangeInfos")
                        .HasForeignKey("UpdateIntervalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdateInterval");
                });

            modelBuilder.Entity("CC01_0001.Models.Filter", b =>
                {
                    b.HasOne("CC01_0001.Models.MarketSettings", "Symbol")
                        .WithMany("Filters")
                        .HasForeignKey("SymbolId");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("CC01_0001.Models.MarketSettings", b =>
                {
                    b.HasOne("CC01_0001.Models.CryptoCurrency", "CryptoCurrency")
                        .WithOne("MarketSettings")
                        .HasForeignKey("CC01_0001.Models.MarketSettings", "CryptoCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CC01_0001.Models.ExchangeInfo", "ExchangeInfo")
                        .WithMany()
                        .HasForeignKey("ExchangeInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CC01_0001.Models.UpdateInterval", "UpdateInterval")
                        .WithMany("MarketSettingsSet")
                        .HasForeignKey("UpdateIntervalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CryptoCurrency");

                    b.Navigation("ExchangeInfo");

                    b.Navigation("UpdateInterval");
                });

            modelBuilder.Entity("CC01_0001.Models.PermissionSet", b =>
                {
                    b.HasOne("CC01_0001.Models.MarketSettings", null)
                        .WithMany("PermissionSets")
                        .HasForeignKey("MarketSettingsId");
                });

            modelBuilder.Entity("CC01_0001.Models.PermissionSetPermissions", b =>
                {
                    b.HasOne("CC01_0001.Models.Permission", "Permission")
                        .WithMany("PermissionSetPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CC01_0001.Models.PermissionSet", "PermissionSet")
                        .WithMany("PermissionSetPermissions")
                        .HasForeignKey("PermissionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("PermissionSet");
                });

            modelBuilder.Entity("CC01_0001.Models.SymbolOrderType", b =>
                {
                    b.HasOne("CC01_0001.Models.MarketSettings", "marketSettings")
                        .WithMany("SymbolOrderTypes")
                        .HasForeignKey("MarketSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CC01_0001.Models.OrderType", "OrderType")
                        .WithMany("SymbolOrderTypes")
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderType");

                    b.Navigation("marketSettings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CC01_0001.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CC01_0001.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CC01_0001.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CC01_0001.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CC01_0001.Models.CryptoCurrency", b =>
                {
                    b.Navigation("MarketSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("CC01_0001.Models.CurrencySymbol", b =>
                {
                    b.Navigation("CryptoCurrency");
                });

            modelBuilder.Entity("CC01_0001.Models.ExchangeInfo", b =>
                {
                    b.Navigation("BinanceExchangeRateLimits");

                    b.Navigation("CryptoCurrencies");

                    b.Navigation("ExchangeFilters");
                });

            modelBuilder.Entity("CC01_0001.Models.MarketSettings", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("PermissionSets");

                    b.Navigation("SymbolOrderTypes");
                });

            modelBuilder.Entity("CC01_0001.Models.OrderType", b =>
                {
                    b.Navigation("SymbolOrderTypes");
                });

            modelBuilder.Entity("CC01_0001.Models.Permission", b =>
                {
                    b.Navigation("PermissionSetPermissions");
                });

            modelBuilder.Entity("CC01_0001.Models.PermissionSet", b =>
                {
                    b.Navigation("PermissionSetPermissions");
                });

            modelBuilder.Entity("CC01_0001.Models.RateLimit", b =>
                {
                    b.Navigation("BinanceExchangeRateLimits");
                });

            modelBuilder.Entity("CC01_0001.Models.UpdateInterval", b =>
                {
                    b.Navigation("CryptoCurrencies");

                    b.Navigation("ExchangeInfos");

                    b.Navigation("MarketSettingsSet");
                });
#pragma warning restore 612, 618
        }
    }
}
