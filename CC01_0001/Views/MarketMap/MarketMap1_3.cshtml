@* Views/Crypto/MarketMap.cshtml
Version: 1.3.0
(c) 2024, Minh Tri Tran - Licensed under CC BY 4.0
https://creativecommons.org/licenses/by/4.0/
*@

@{
    ViewData["Title"] = "Crypto Market Treemap";
}

<div class="container">
    <h1>@ViewData["Title"]</h1>
    <p>A treemap visualization of the cryptocurrency market.</p>

    <!-- Category Filters -->
    <div>
        <label><input type="checkbox" id="currencyFilter" checked> Currency</label>
        <label><input type="checkbox" id="platformFilter" checked> Platform</label>
        <label><input type="checkbox" id="defiFilter" checked> DeFi</label>
        <label><input type="checkbox" id="nftFilter" checked> NFT</label>
    </div>

    <!-- Sentiment Filters -->
    <div>
        <label><input type="checkbox" id="bullishFilter" checked> Bullish</label>
        <label><input type="checkbox" id="bearishFilter" checked> Bearish</label>
        <label><input type="checkbox" id="neutralFilter" checked> Neutral</label>
    </div>

    <div id="crypto-map"></div>

    <!-- Legend -->
    <div id="legend">
        <div class="legend-item">
            <div class="legend-color" style="background-color: green;"></div>
            <span>Bullish</span>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background-color: red;"></div>
            <span>Bearish</span>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background-color: gray;"></div>
            <span>Neutral</span>
        </div>
    </div>


    @section Styles {
        <style>
            #crypto-map {
                width: 100%;
                height: 600px;
                border: 1px solid #ccc;
                position: relative;
                box-sizing: border-box;
            }

            .tooltip {
                position: absolute;
                background-color: white;
                border: 1px solid black;
                padding: 5px;
                font-size: 12px;
                pointer-events: none;
                opacity: 0; /* Hidden by default */
                transition: opacity 0.2s; /* Smooth fade-in effect */
                z-index: 10; /* Ensure tooltip is above other elements */
            }
            /* Style for filter labels */
            label {
                margin-right: 10px;
                cursor: pointer;
            }

            /* Style for checkbox inputs */
            input[type="checkbox"] {
                margin-right: 5px;
            }

            .category {
                font-size: 16px;
                font-weight: bold;
                fill: black; /* Category label color */
            }

            .tile {
                stroke: #fff;
                stroke-width: 1px;
            }

            /* Legend Styles */
            #legend {
                display: flex;
                justify-content: flex-start; /* Align items to the left */
                margin-top: 10px;
            }

            .legend-item {
                display: flex;
                align-items: center;
                margin-right: 20px;
            }

            .legend-color {
                width: 20px;
                height: 20px;
                margin-right: 5px;
                border: 1px solid black; /* Optional: Add a border for better visibility */
            }

        </style>
    }

    @section Scripts {
        <script src="https://d3js.org/d3.v7.min.js"></script>
        <script>

            document.addEventListener("DOMContentLoaded", () => {

                const cryptoData = @Html.Raw(Json.Serialize(Model.CryptoData));

                const container = document.getElementById("crypto-map");
                const width = container.clientWidth;
                const height = container.clientHeight;

                const svg = d3.select("#crypto-map")
                    .append("svg")
                    .attr("width", "100%")
                    .attr("height", "100%")
                    .attr("viewBox", [0, 0, width, height])
                    .attr("preserveAspectRatio", "xMidYMid meet");

                const tooltip = d3.select("body")
                    .append("div")
                    .attr("class", "tooltip")
                    .style("position", "absolute")
                    .style("background-color", "white")
                    .style("border", "1px solid black")
                    .style("padding", "5px")
                    .style("display", "none");


                function updateChart() {

                    const currencyFilter = document.getElementById("currencyFilter").checked;
                    const platformFilter = document.getElementById("platformFilter").checked;
                    const defiFilter = document.getElementById("defiFilter").checked;
                    const nftFilter = document.getElementById("nftFilter").checked;

                    const bullishFilter = document.getElementById("bullishFilter").checked;
                    const bearishFilter = document.getElementById("bearishFilter").checked;
                    const neutralFilter = document.getElementById("neutralFilter").checked;

                    // Filter the data
                    const filteredData = cryptoData.filter(d =>
                        ((currencyFilter && d.category === "Currency") ||
                            (platformFilter && d.category === "Platform") ||
                            (defiFilter && d.category === "DeFi") ||
                            (nftFilter && d.category === "NFT")) &&
                        ((bullishFilter && d.sentiment === "bullish") ||
                            (bearishFilter && d.sentiment === "bearish") ||
                            (neutralFilter && d.sentiment === "neutral"))
                    );

                    // Restructure the data to create a hierarchy (simplified)
                    const hierarchicalData = {
                        name: "root",
                        children: filteredData
                    };

                    const root = d3.hierarchy(hierarchicalData)
                        .sum(d => d.marketCap)
                        .sort((a, b) => b.value - a.value);

                    const treemapLayout = d3.treemap()
                        .tile(d3.treemapBinary) // Use binary tiling
                        .size([width, height])
                        .padding(1);

                    treemapLayout(root);


                    // Select all rectangles (cells)
                    const nodes = svg.selectAll(".tile") // Use a class selector
                        .data(root.descendants().slice(1), d => d.data.symbol); // Key function (exclude root)

                    // Exit
                    nodes.exit()
                        .transition()
                        .duration(300)
                        .style("opacity", 0)
                        .remove();

                    // Enter
                    const enterNodes = nodes.enter()
                        .append("rect")
                        .attr("class", "tile") // Add the class 'tile'
                        .attr("x", d => d.x0)
                        .attr("y", d => d.y0)
                        .attr("width", d => d.x1 - d.x0)
                        .attr("height", d => d.y1 - d.y0)
                        .style("fill", d => {
                            if (d.data.sentiment === "bullish") return "green";
                            if (d.data.sentiment === "bearish") return "red";
                            return "gray";
                        })
                        .style("stroke", "black")
                        .style("stroke-width", 0.5)
                        .style("opacity", 0); // Fade in


                    // Enter + Update
                    enterNodes.merge(nodes)
                        .transition()
                        .duration(300)
                        .attr("x", d => d.x0)
                        .attr("y", d => d.y0)
                        .attr("width", d => d.x1 - d.x0)
                        .attr("height", d => d.y1 - d.y0)
                        .style("fill", d => {
                            if (d.data.sentiment === "bullish") return "green";
                            if (d.data.sentiment === "bearish") return "red";
                            return "gray";
                        })
                        .style("opacity", 1);

                    enterNodes.merge(nodes)
                        .attr("class", "tile")  //Make sure all tiles have the class
                        .on("mouseover", (event, d) => {
                            tooltip.transition()
                                .duration(200)
                                .style("opacity", 0.9)
                                .style("display", "block");

                            tooltip.html(`<b>${d.data.symbol}</b><br/>Market Cap: $${(d.data.marketCap / 1000000000).toFixed(2)} Billion`)
                                .style("left", (event.pageX + 10) + "px")
                                .style("top", (event.pageY - 28) + "px");
                        })
                        .on("mousemove", (event) => {
                            tooltip
                                .style("left", (event.pageX + 10) + "px")
                                .style("top", (event.pageY - 28) + "px");
                        })
                        .on("mouseout", () => {
                            tooltip.transition()
                                .duration(500)
                                .style("opacity", 0)
                                .style("display", "none");
                        });


                    // Select all text elements
                    const textNodes = svg.selectAll("text")
                        .data(root.descendants().slice(1), d => d.data.symbol);

                    // Exit text
                    textNodes.exit()
                        .transition()
                        .duration(300)
                        .style("opacity", 0)
                        .remove();

                    // Enter text
                    const enterTextNodes = textNodes.enter()
                        .append("text")
                        .attr("x", d => d.x0 + 5)
                        .attr("y", d => d.y0 + 15)
                        .attr("font-size", "10px")
                        .attr("fill", "white")
                        .text(d => d.data.symbol ? d.data.symbol : "") // Category name or symbol
                        .style("opacity", 0);

                    // Enter + Update text
                    enterTextNodes.merge(textNodes)
                        .transition()
                        .duration(300)
                        .attr("x", d => d.x0 + 5)
                        .attr("y", d => d.y0 + 15)
                        .attr("font-size", "10px")
                        .attr("fill", "white")
                        .text(d => d.data.symbol ? d.data.symbol : "") // Category name or symbol
                        .style("opacity", 1);

                }

                // Attach Event listeners to filters
                const filters = ["currencyFilter", "platformFilter", "defiFilter", "nftFilter", "bullishFilter", "bearishFilter", "neutralFilter"];
                filters.forEach(filterId => {
                    const filterElement = document.getElementById(filterId);
                    if (filterElement) {
                        filterElement.addEventListener("change", updateChart);
                    } else {
                        console.warn(`Filter element with ID '${filterId}' not found.`);
                    }
                });

                // Initial chart draw
                updateChart();

                console.log("D3 script loaded");  // Helpful message
            });
        </script>
    }
</div>