@* Views/Crypto/MarketMap2.cshtml
    Version: 1.3
    (c) 2024, Minh Tri Tran - Licensed under CC BY 4.0
    https://creativecommons.org/licenses/by/4.0/
*@
@model CC01_0001.ViewModels.CryptoMarketViewModel

@{
    ViewData["Title"] = "Crypto Market Treemap";
}

<div class="container">
    <h1>@ViewData["Title"]</h1>
    <p>A treemap visualization of the cryptocurrency market.</p>

    <div id="crypto-map">
        <!-- The chart will be rendered here -->
    </div>

    <div id="crypto-details">
        <h3>Selected Cryptocurrency:</h3>
        <div id="crypto-details-content">
            <p>Click on a rectangle to see details.</p>
        </div>
    </div>

    @section Styles {
        <style>
            /* Forcing the CSS Styles to override */
            #crypto-map {
                width: 100%;
                height: 600px; /* Set a default height */
                border: 1px solid #ccc;
                position: relative; /* For tooltip positioning */
                box-sizing: border-box;
            }

            /* Add styles for Observable-style chart (optional) */
            svg {
                max-width: 100%;
                height: auto;
                overflow: visible;
                font: 10px sans-serif;
            }

            #crypto-details {
                margin-top: 20px;
                border: 1px solid #ccc;
                padding: 10px;
            }

            #crypto-details-content {
                font-size: 14px;
            }
        </style>
    }

    @section Scripts {
        <script src="https://d3js.org/d3.v7.min.js"></script>

        <script>
            document.addEventListener("DOMContentLoaded", () => {
                const data = @Html.Raw(Json.Serialize(Model.CryptoData)); // Get data from the model
                const chartContainer = document.getElementById("crypto-map"); // Get container

                // Your chart function (as provided in the prompt)
                function chart(data) {
                    // Specify the chart’s dimensions.
                    const width = chartContainer.clientWidth; // Get width dynamically
                    const height = chartContainer.clientHeight; // Get height dynamically


                    const color = d3.scaleOrdinal()
                        .domain(["Currency", "Platform", "DeFi", "NFT"])
                        .range(["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728"]);  // Category colors

                    // Create the treemap layout.
                    const treemap = data => d3.treemap()
                        .size([width, height])
                        .paddingOuter(3)
                        .paddingTop(19)
                        .paddingInner(1)
                        .round(true)
                        (d3.hierarchy(data)
                            .sum(d => d.marketCap) // Use marketCap from our model
                            .sort((a, b) => b.marketCap - a.marketCap)); // Sort by marketCap

                    const root = treemap(data);

                    // Create the SVG container.
                    const svg = d3.select(chartContainer)
                        .append("svg")
                        .attr("width", "100%") // Set width to 100%
                        .attr("height", "100%") // Set height to 100%
                        .attr("viewBox", [0, 0, width, height])
                        .attr("style", "max-width: 100%; height: auto; overflow: visible; font: 10px sans-serif;");

                    // Replace DOM.uid with a simple function
                    const uid = (name) => {
                        return `O-${name}`;
                    };

                    const shadow = uid("shadow");

                    svg.append("filter")
                        .attr("id", shadow)
                        .append("feDropShadow")
                        .attr("flood-opacity", 0.3)
                        .attr("dx", 0)
                        .attr("stdDeviation", 3);

                    const node = svg.selectAll("g")
                        .data(root.descendants().filter(d => d.depth > 0)) // Filter out the root node
                        .join("g")
                        .attr("transform", d => `translate(${d.x0},${d.y0})`);

                    const format = d3.format(",d");
                    node.append("title")
                        .text(d => `${d.ancestors().reverse().map(d => d.data.key || d.data.symbol).join("/")}\n${format(d.marketCap || d.value)}`); // Correct title formatting and value

                    node.append("rect")
                        .attr("id", d => {
                            const id = uid("node");
                            d.nodeUid = id;
                            return id;
                        })
                        .attr("fill", d => d.depth === 1 ? color(d.data.key) : (d.data.sentiment === "bullish" ? "green" : d.data.sentiment === "bearish" ? "red" : "gray")) // Category color or sentiment
                        .attr("width", d => d.x1 - d.x0)
                        .attr("height", d => d.y1 - d.y0);

                    node.append("clipPath")
                        .attr("id", d => {
                            const id = uid("clip");
                            d.clipUid = id;
                            return id;
                        })
                        .append("use")
                        .attr("xlink:href", d => `#${d.nodeUid}`);

                    node.append("text")
                        .attr("clip-path", d => `url(#${d.clipUid})`)
                        .selectAll("tspan")
                        .data(d => {
                            if (d.depth === 1) {
                                return [d.data.key];  // Category labels
                            } else {
                                return (d.data.symbol || "").split(/(?=[A-Z][^A-Z])/g).concat(format(d.marketCap || 0)); // Crypto symbols and market cap
                            }
                        })
                        .join("tspan")
                        .attr("fill-opacity", (d, i, nodes) => i === nodes.length - 1 ? 0.7 : null)
                        .text(d => d);

                    node.filter(d => d.depth === 1).selectAll("tspan") // Category labels
                        .attr("x", 3)
                        .attr("y", 13);

                    node.filter(d => d.depth > 1 && !d.children).selectAll("tspan") // Crypto labels
                        .attr("x", 3)
                        .attr("y", (d, i, nodes) => `${(i === nodes.length - 1) * 0.3 + 1.1 + i * 0.9}em`);

                    return svg.node();
                }

                if (chartContainer) {
                    // Remove any existing SVG
                    while (chartContainer.firstChild) {
                        chartContainer.removeChild(chartContainer.firstChild);
                    }
                    chart(data); // Call the chart function, append directly to chartContainer
                } else {
                    console.error("Chart container not found!");
                }
            });
        </script>
    }
</div>